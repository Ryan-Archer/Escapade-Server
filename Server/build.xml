<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE project>
<project name="Server" default="jar.create">

    <include file="../meta.xml" as="meta" />

    <property environment="environment" />

    <!-- ================================================================== -->
    <!--                          program metadata                          -->
    <!-- ================================================================== -->

    <!-- name of the associated Android app -->
    <property name="app.name" value="Couch Potato" />

    <!-- name of the program being built -->
    <property name="program.name" value="${app.name} ${ant.project.name}" />

    <!-- name for distributable installation packages, set using Javascript -->
    <script language="javascript">
        project.setProperty("package.name", project.getProperty("app.name").toLowerCase().replace(" ", "-")+"-server");
    </script>

    <!-- shorthand for the installation directory itself, within the context of a larger installation on a machine -->
    <property name="core.name" value="Core" />

    <!-- ================================================================== -->
    <!--       storage and/or build output locations for various files      -->
    <!-- ================================================================== -->

    <!-- distributable installation packages -->
    <property name="distribution" location="dist" />

    <!-- core build; after building, this directory will contain a working program installation -->
    <property name="packaging" location="build" />

    <!-- executables -->
    <property name="bin" location="${packaging}/bin" />

    <!-- global configuration files -->
    <property name="config" location="${packaging}/config" />

    <!-- program libraries -->
    <property name="lib" location="${packaging}/lib" />

    <!-- program libraries, as path -->
    <path id="lib">
        <fileset dir="${lib}" includes="*.jar" />
    </path>

    <!-- ant task libraries -->
    <path id="lib.tasks">
        <fileset dir="lib" includes="*.jar" />
    </path>

    <!-- control directory for the .deb installation package -->
    <property name="control.deb" location="control.deb" />

    <!-- class files -->
    <property name="compile.dir" location="compile" />

    <!-- WiX object files -->
    <property name="compile.msi.dir" location="compile.msi" />

    <!-- generated Linux scripts and configuration files -->
    <property name="gen.linux.dir" location="gen.linux" />

    <!-- generated WiX source files -->
    <property name="gen.msi.dir" location="gen.msi" />

    <!-- Java source files -->
    <property name="src" location="src" />

    <!-- .deb control directory template files -->
    <property name="src.deb" location="src.deb" />

    <!-- templates for cross-platform configuration files -->
    <property name="src.config" location="src.config" />

    <!-- templates for Linux scripts and configuration files -->
    <property name="src.linux" location="src.linux" />

    <!-- WiX source template files -->
    <property name="src.msi" location="src.msi" />

    <!-- program's main executable jar -->
    <property name="jar.path" location="${bin}/Server.jar" />

    <!-- build's copy of the program license -->
    <property name="license" location="${packaging}/LICENSE.txt" />

    <!-- build's copy of the program copyright notice -->
    <property name="notice" location="${packaging}/NOTICE.txt" />

    <!-- communications protocol build script -->
    <property name="communications.build" location="../Communications Protocol/build.xml" />

    <!-- JDK to use for compiling Java 1.7 source code -->
    <property name="java.home.1.7" location="${java.home}" />

    <!-- WiX toolset executables -->
    <property name="bin.wix" location="${environment.WIX}/bin" />

    <!-- ================================================================== -->
    <!--                platform-specific installation paths                -->
    <!-- ================================================================== -->

    <!-- Linux installation directory -->
    <property name="install.linux.dir" value="/usr/share/${package.name}" />

    <!-- program's main executable jar, relative to the root of the Linux installation directory -->
    <pathconvert targetos="unix" property="jar.path.relative.linux">
        <path>
            <pathelement location="${jar.path}" />
        </path>
        <map from="${packaging}${file.separator}" to="" />
    </pathconvert>

    <!-- program's main executable jar, relative to the root of the Windows installation directory -->
    <pathconvert targetos="windows" property="jar.path.relative.windows">
        <path>
            <pathelement location="${jar.path}" />
        </path>
        <map from="${packaging}${file.separator}" to="" />
    </pathconvert>

    <!-- ================================================================== -->
    <!--                       data-gathering targets                       -->
    <!-- ================================================================== -->

    <target
        name="network.port.get"
        description="read the default port number from Java code"
        depends="communications.build.jar.create">
        <script language="javascript" classpathref="lib">
            var SettingsPackage=new JavaImporter(Packages.codes.soloware.couchpotato.settings);
            with (SettingsPackage)
            {
                project.setNewProperty("Network.defaultPort", Network.defaultPort);
            }
        </script>
    </target>

    <!-- ================================================================== -->
    <!--                            build targets                           -->
    <!-- ================================================================== -->

    <target name="all" description="create all build outputs" depends="clean, distribute.deb, distribute.msi, distribute.zip" />

    <target name="clean" description="delete all build outputs">
        <ant antfile="${communications.build}" inheritAll="false" useNativeBasedir="true">
            <target name="clean" />
            <propertyset>
                <propertyref name="lib" />
            </propertyset>
        </ant>
        <delete file="${license}" />
        <delete file="${notice}" />
        <delete dir="${distribution}" />
        <delete dir="${bin}" />
        <delete dir="${config}" />
        <delete dir="${control.deb}" />
        <delete dir="${compile.dir}" />
        <delete dir="${compile.msi.dir}" />
        <delete dir="${gen.linux.dir}" />
        <delete dir="${gen.msi.dir}" />
    </target>

    <target
        name="distribute.deb"
        description="create .deb installer package"
        depends="gen.linux, license.insert, jar.sign, meta.all">
        <mkdir dir="${distribution}" />
        <signatureprompt
            fileproperty="deb.signature.keyring"
            fileformat="PGP keyring"
            keyproperty="deb.signature.key"
            keypassproperty="deb.signature.passphrase"
            signedfiledescription="Debian changes file" />
        <copy todir="${control.deb}">
            <fileset dir="${src.deb}" />
            <filterset>
                <propertyset negate="true" />
            </filterset>
        </copy>
        <taskdef name="deb" classname="org.vafer.jdeb.ant.DebAntTask" classpathref="lib.tasks" />
        <deb
            destfile="${distribution}/${package.name}.deb"
            control="${control.deb}"
            keyring="${deb.signature.keyring}"
            key="${deb.signature.key}"
            passphrase="${deb.signature.passphrase}">
            <data src="${packaging}" type="directory">
                <mapper type="perm" prefix="${install.linux.dir}" />
            </data>
            <data src="${gen.linux.dir}/start-script.sh" dst="95${package.name}_launch" type="file" conffile="true">
                <mapper type="perm" prefix="/etc/X11/Xsession.d" />
            </data>
            <data src="${notice}" dst="copyright" type="file">
                <mapper type="perm" prefix="/usr/share/doc/${package.name}" />
            </data>
            <data src="${gen.linux.dir}/overrides" dst="${package.name}" type="file">
                <mapper type="perm" prefix="/usr/share/lintian/overrides" />
            </data>
            <data src="${gen.linux.dir}/control" type="file">
                <mapper type="perm" prefix="/usr/share/bug/${package.name}" />
            </data>
        </deb>
    </target>

    <target name="gen.linux" description="generate Linux scripts and configuration files" depends="meta.all">
        <copy todir="${gen.linux.dir}">
            <fileset dir="${src.linux}" />
            <filterset>
                <propertyset negate="true" />
            </filterset>
        </copy>
    </target>

    <target name="distribute.msi" description="create .msi installer package" depends="compile.msi">
        <mkdir dir="${distribution}" />
        <exec executable="${bin.wix}/light.exe" failonerror="true">
            <arg value="-b" />
            <arg value="${packaging}" />
            <arg value="-ext" />
            <arg value="WixFirewallExtension" />
            <arg value="-sice:ICE80" />
            <arg value="-spdb" />
            <arg value="-out" />
            <arg value="${distribution}/${package.name}.msi" />
            <arg value="${compile.msi.dir}/*.wixobj" />
        </exec>
    </target>

    <target name="distribute.zip" description="create .zip archive of the installation directory" depends="jar.sign">
        <mkdir dir="${distribution}" />
        <zip destfile="${distribution}/${package.name}.zip" basedir="${packaging}" />
    </target>

    <target name="compile.msi" description="compile WiX source files" depends="gen.msi">
        <mkdir dir="${compile.msi.dir}" />
        <exec executable="${bin.wix}/candle.exe" failonerror="true">
            <arg value="-ext" />
            <arg value="WixFirewallExtension" />
            <arg value="-out" />
            <arg value="${compile.msi.dir}/" />
            <arg value="${gen.msi.dir}/*.wxs" />
        </exec>
    </target>

    <target name="gen.msi" description="generate WiX source files" depends="jar.sign, network.port.get, meta.all">
        <copy todir="${gen.msi.dir}">
            <fileset dir="${src.msi}" />
            <filterset>
                <propertyset negate="true" />
            </filterset>
        </copy>
        <exec executable="${bin.wix}/heat.exe" failonerror="true">
            <arg value="dir" />
            <arg value="${packaging}/" />
            <arg value="-ag" />
            <arg value="-cg" />
            <arg value="${core.name}" />
            <arg value="-dr" />
            <arg value="INSTALLFOLDER" />
            <arg value="-srd" />
            <arg value="-out" />
            <arg value="${gen.msi.dir}/${core.name}.wxs" />
        </exec>
    </target>

    <target name="jar.sign" description="sign output jar files" depends="jar.create, communications.build.jar.create">
        <signatureprompt
            fileproperty="jar.signature.keystore"
            filepassproperty="jar.signature.storepass"
            fileformat="Java keystore"
            keyproperty="jar.signature.alias"
            keypassproperty="jar.signature.keypass"
            signedfiledescription="jar files" />
        <signjar
            jar="${jar.path}"
            keystore="${jar.signature.keystore}"
            storepass="${jar.signature.storepass}"
            alias="${jar.signature.alias}"
            keypass="${jar.signature.keypass}" />
        <ant antfile="${communications.build}" inheritAll="false" useNativeBasedir="true">
            <target name="jar.sign" />
            <propertyset>
                <propertyref name="lib" />
                <propertyref prefix="jar.signature" />
            </propertyset>
        </ant>
    </target>

    <target
        name="jar.create"
        description="create executable jar file"
        depends="compile, gen.config, license.insert, communications.build.jar.create, meta.timestamp, meta.version.get">
        <mkdir dir="${bin}" />
        <manifestclasspath property="jar.classpath" jarfile="${jar.path}">
            <classpath>
                <path refid="lib" />
                <pathelement path="${config}" />
            </classpath>
        </manifestclasspath>
        <jar destfile="${jar.path}">
            <fileset dir="${compile.dir}" />
            <metainf file="${license}" />
            <metainf file="${notice}" />
            <manifest>
                <attribute name="Date-Built" value="${TODAY}" />
                <attribute name="Class-Path" value="${jar.classpath}" />
                <attribute name="Main-Class" value="codes.soloware.couchpotato.server.Main" />
                <attribute name="Version" value="${version}" />
            </manifest>
        </jar>
    </target>

    <target name="license.insert" description="copy licensing information into the build">
        <copy file="../LICENSE.txt" tofile="${license}" />
        <copy file="../NOTICE.txt" tofile="${notice}" />
    </target>

    <target name="gen.config" description="generate cross-platform configuration files" depends="meta.all">
        <copy todir="${config}">
            <fileset dir="${src.config}" />
            <filterset>
                <propertyset negate="true" />
            </filterset>
        </copy>
    </target>

    <target name="compile" description="compile all Java source files" depends="communications.build.jar.create">
        <mkdir dir="${compile.dir}" />
        <javac
            destdir="${compile.dir}"
            target="1.7"
            source="1.7"
            includeAntRuntime="false"
            createMissingPackageInfoClass="false">
            <src path="${src}" />
            <classpath refid="lib" />
            <bootclasspath>
                <pathelement location="${java.home.1.7}/jre/lib/rt.jar" />
                <pathelement location="${java.home.1.7}/lib/rt.jar" />
            </bootclasspath>
        </javac>
    </target>

    <target name="communications.build.jar.create" description="build communications protocol library jar">
        <ant antfile="${communications.build}" inheritAll="false" useNativeBasedir="true">
            <target name="jar.create" />
            <propertyset>
                <propertyref name="java.home.1.6" />
                <propertyref name="lib" />
            </propertyset>
        </ant>
    </target>

</project>
