<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE project>
<project name="Server" default="jar.create">

    <include file="../meta.xml" as="meta" />

    <!-- ================================================================== -->
    <!--                          program metadata                          -->
    <!-- ================================================================== -->

    <!-- name of the associated Android app -->
    <property name="app.name" value="Escapade" />

    <!-- name for distributable installation packages, set using Javascript -->
    <script language="javascript">
        project.setProperty("package.name", project.getProperty("app.name").toLowerCase()+"-server");
    </script>

    <!-- Linux installation directory -->
    <property name="install.linux.dir" location="/usr/share/${package.name}" />

    <!-- ================================================================== -->
    <!--       storage and/or build output locations for various files      -->
    <!-- ================================================================== -->

    <!-- distributable installation packages -->
    <property name="distribution" location="dist" />

    <!-- core build; after building, this directory will contain a working program installation -->
    <property name="packaging" location="build" />

    <!-- executables -->
    <property name="bin" location="${packaging}/bin" />

    <!-- global configuration files -->
    <property name="config" location="${packaging}/config" />

    <!-- program libraries -->
    <property name="lib" location="${packaging}/lib" />

    <!-- program libraries, as path -->
    <path id="lib">
        <fileset dir="${lib}" includes="*.jar" />
    </path>

    <!-- ant task libraries -->
    <path id="lib.tasks">
        <fileset dir="lib" includes="*.jar" />
    </path>

    <!-- control directory for the .deb installation package -->
    <property name="control.deb" location="control.deb" />

    <!-- class files -->
    <property name="compile.dir" location="compile" />

    <!-- compiled script and configuration files -->
    <property name="compile.config.dir" location="compile.config" />

    <!-- Java source files -->
    <property name="src" location="src" />

    <!-- .deb control directory template files -->
    <property name="src.deb" location="src.deb" />

    <!-- script and configuration template files -->
    <property name="src.config" location="src.config" />

    <!-- program's main executable jar -->
    <property name="jar.path" location="${bin}/Server.jar" />

    <!-- program's main executable jar, relative to the root of the installation -->
    <property name="jar.path.relative" location="${jar.path}" relative="true" basedir="${packaging}" />

    <!-- build's copy of the program change log -->
    <property name="changelog" location="${compile.config.dir}/changelog" />

    <!-- build's copy of the program license -->
    <property name="license" location="${packaging}/LICENSE.txt" />

    <!-- build's copy of the program copyright notice -->
    <property name="notice" location="${packaging}/NOTICE.txt" />

    <!-- communications protocol build script -->
    <property name="communications.build" location="../Communications Protocol/build.xml" />

    <!-- ================================================================== -->
    <!--                            build targets                           -->
    <!-- ================================================================== -->

    <target name="all" description="create all build outputs" depends="clean, distribute.deb, distribute.zip" />

    <target name="clean" description="delete all build outputs">
        <ant antfile="${communications.build}" inheritAll="false" useNativeBasedir="true">
            <target name="clean" />
            <propertyset>
                <propertyref name="lib" />
            </propertyset>
        </ant>
        <delete file="${license}" />
        <delete file="${notice}" />
        <delete dir="${distribution}" />
        <delete dir="${bin}" />
        <delete dir="${config}" />
        <delete dir="${control.deb}" />
        <delete dir="${compile.dir}" />
        <delete dir="${compile.config.dir}" />
    </target>

    <target
        name="distribute.deb"
        description="create .deb installer package"
        depends="compile.config, license.insert, jar.sign, meta.all">
        <mkdir dir="${distribution}" />
        <signatureprompt
            fileproperty="deb.signature.keyring"
            fileformat="PGP keyring"
            keyproperty="deb.signature.key"
            keypassproperty="deb.signature.passphrase"
            signedfiledescription="Debian changes file" />
        <copy todir="${control.deb}">
            <fileset dir="${src.deb}" />
            <filterset>
                <propertyset negate="true" />
            </filterset>
        </copy>
        <copy file="../CHANGELOG.txt" tofile="${changelog}" />
        <exec executable="gzip">
            <arg value="--best" />
            <arg value="${changelog}" />
        </exec>
        <taskdef name="deb" classname="org.vafer.jdeb.ant.DebAntTask" classpathref="lib.tasks" />
        <deb
            destfile="${distribution}/${package.name}.deb"
            control="${control.deb}"
            keyring="${deb.signature.keyring}"
            key="${deb.signature.key}"
            passphrase="${deb.signature.passphrase}">
            <data src="${packaging}" type="directory">
                <mapper type="perm" prefix="${install.linux.dir}" />
            </data>
            <data src="${compile.config.dir}/start-script.sh" dst="95${package.name}_launch" type="file" conffile="true">
                <mapper type="perm" prefix="/etc/X11/Xsession.d" />
            </data>
            <data src="${changelog}.gz" dst="changelog.gz" type="file">
                <mapper type="perm" prefix="/usr/share/doc/${package.name}" />
            </data>
            <data src="${notice}" dst="copyright" type="file">
                <mapper type="perm" prefix="/usr/share/doc/${package.name}" />
            </data>
            <data src="${compile.config.dir}/overrides" dst="${package.name}" type="file">
                <mapper type="perm" prefix="/usr/share/lintian/overrides" />
            </data>
            <data src="${compile.config.dir}/control" type="file">
                <mapper type="perm" prefix="/usr/share/bug/${package.name}" />
            </data>
        </deb>
    </target>

    <target name="distribute.zip" description="create .zip archive of the installation directory" depends="jar.sign">
        <mkdir dir="${distribution}" />
        <zip destfile="${distribution}/${package.name}.zip" basedir="${packaging}" />
    </target>

    <target name="jar.sign" description="sign output jar files" depends="jar.create, communications.build.jar.create">
        <signatureprompt
            fileproperty="jar.signature.keystore"
            filepassproperty="jar.signature.storepass"
            fileformat="Java keystore"
            keyproperty="jar.signature.alias"
            keypassproperty="jar.signature.keypass"
            signedfiledescription="jar files" />
        <signjar
            jar="${jar.path}"
            keystore="${jar.signature.keystore}"
            storepass="${jar.signature.storepass}"
            alias="${jar.signature.alias}"
            keypass="${jar.signature.keypass}" />
        <ant antfile="${communications.build}" inheritAll="false" useNativeBasedir="true">
            <target name="jar.sign" />
            <propertyset>
                <propertyref name="lib" />
                <propertyref prefix="jar.signature" />
            </propertyset>
        </ant>
    </target>

    <target
        name="jar.create"
        description="create executable jar file"
        depends="compile, compile.config, license.insert, communications.build.jar.create, meta.timestamp, meta.version.get">
        <mkdir dir="${bin}" />
        <copy file="${compile.config.dir}/logback.xml" todir="${config}" />
        <manifestclasspath property="jar.classpath" jarfile="${jar.path}">
            <classpath>
                <path refid="lib" />
                <pathelement path="${config}" />
            </classpath>
        </manifestclasspath>
        <jar destfile="${jar.path}">
            <fileset dir="${compile.dir}" />
            <metainf file="${license}" />
            <metainf file="${notice}" />
            <manifest>
                <attribute name="Date-Built" value="${TODAY}" />
                <attribute name="Class-Path" value="${jar.classpath}" />
                <attribute name="Main-Class" value="codes.soloware.escapade.server.Main" />
                <attribute name="Version" value="${version}" />
            </manifest>
        </jar>
    </target>

    <target name="license.insert" description="copy licensing information into the build">
        <copy file="../LICENSE.txt" tofile="${license}" />
        <copy file="../NOTICE.txt" tofile="${notice}" />
    </target>

    <target
        name="compile.config"
        description="compile script and configuration files by inserting property values into them"
        depends="meta.all">
        <copy todir="${compile.config.dir}">
            <fileset dir="${src.config}" />
            <filterset>
                <propertyset negate="true" />
            </filterset>
        </copy>
    </target>

    <target name="compile" description="compile all Java source files" depends="communications.build.jar.create">
        <mkdir dir="${compile.dir}" />
        <findjvm version="1.7" />
        <javac
            destdir="${compile.dir}"
            target="1.7"
            source="1.7"
            includeAntRuntime="false"
            createMissingPackageInfoClass="false">
            <src path="${src}" />
            <classpath refid="lib" />
            <bootclasspath>
                <pathelement location="${java.home.1.7}/jre/lib/rt.jar" />
                <pathelement location="${java.home.1.7}/lib/rt.jar" />
            </bootclasspath>
        </javac>
    </target>

    <target name="communications.build.jar.create" description="build communications protocol library jar">
        <ant antfile="${communications.build}" inheritAll="false" useNativeBasedir="true">
            <target name="jar.create" />
            <propertyset>
                <propertyref name="java.home.1.6" />
                <propertyref name="lib" />
            </propertyset>
        </ant>
    </target>

</project>
